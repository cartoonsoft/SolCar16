@using Infra.Cross.Identity.ViewModels

@model RegisterViewModel

@{
    ViewBag.Title = "Account";
    ViewBag.SubTitle = "Edição de usuário";
}

<div id="content">
    <div class="row">
        <div class="col-xs-12 col-sm-7 col-md-7 col-lg-4">
            <h1 class="page-title txt-color-blueDark">
                <i class="fa fa-pencil-square-o fa-fw "></i>
                @ViewBag.Title
                <span>
                    >
                    @ViewBag.SubTitle
                </span>
            </h1>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12 col-sm-8 col-md-8 col-lg-8">
            <div class="well no-padding">
                <form action="@Url.Action("Edit", "Account")" method="POST" id="frm-register-user" class="smart-form">
                    <header>
                        Edição de usuário
                    </header>
                    @Html.AntiForgeryToken()
                    @Html.ValidationBootstrap()
                    @Html.HiddenFor(model => model.Id)
                    @Html.HiddenFor(model => model.Ativo)
                    <fieldset>
                        <div class="row">
                            <section class="col col-md-12">
                                @Html.LabelFor(model => model.Nome)
                                <label class="input">
                                    @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control", placeholder = "Nome", autocomplete = "off" } })
                                </label>
                            </section>
                        </div>
                        <div class="row">
                            <section class="col col-6">
                                @Html.LabelFor(model => model.UserName)
                                <label class="input">
                                    <i class="icon-prepend fa fa-user"></i>
                                    @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control", placeholder = "Usuário", autocomplete = "off" } })
                                </label>
                            </section>
                            <section class="col col-6">
                                @Html.LabelFor(model => model.GrupoUsuario)
                                <label class="input">
                                    @Html.EnumDropDownListFor(model => model.GrupoUsuario, htmlAttributes: new { @class = "form-control" })
                                </label>
                            </section>
                        </div>
                        <div class="row">
                            <section class="col col-6">
                                @Html.LabelFor(model => model.Email)
                                <label class="input">
                                    <i class="icon-prepend fa fa-envelope-o"></i>
                                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", placeholder = "Email", autocomplete = "off" } })
                                </label>
                            </section>
                            <section class="col col-6">
                                @Html.LabelFor(model => model.EmailConfirm)
                                <label class="input">
                                    <i class="icon-prepend fa fa-envelope-o"></i>
                                    @Html.EditorFor(model => model.EmailConfirm, new { htmlAttributes = new { @class = "form-control" } })
                                </label>
                            </section>
                        </div>
                        <div class="row">
                            <section class="col col-6">
                                @Html.LabelFor(model => model.Password)
                                <label class="input">
                                    <i class="icon-prepend fa fa-lock"></i>
                                    @Html.PasswordFor(model => model.Password, new { @class = "form-control" })
                                </label>
                            </section>
                            <section class="col col-6">
                                @Html.LabelFor(model => model.ConfirmPassword)
                                <label class="input">
                                    <i class="icon-prepend fa fa-lock"></i>
                                    @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control" })
                                </label>
                            </section>
                        </div>
                        <div class="row">
                            <section class="col col-6">
                                @Html.LabelFor(model => model.PhoneNumber)
                                <label class="input">
                                    <i class="icon-prepend fa fa-phone"></i>
                                    <input type="tel" id="PhoneNumber" name="PhoneNumber" class="form-control" placeholder="Numero de telefone">
                                </label>
                            </section>
                        </div>
                    </fieldset>
                    <footer>
                        <button type="submit" class="btn btn-primary btn-lg">
                            <i class="fa fa-save"></i>
                            Salvar
                        </button>
                        @Html.ActionLink("Voltar", "Index", "Account", null, new { @class = "btn btn-default" })
                    </footer>
                    <div class="message">
                        <i class="fa fa-check"></i>
                        <p>
                            Thank you for your registration!
                        </p>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section pagespecific{

    <script type="text/javascript">
        $(function () {

            $("#PhoneNumber").mask("(99) 99999-9999");

            // Validation -------------------------------------------------------------
            $("#frm-register-user").validate({
                // Rules for form validation
                rules: {
                    Nome: {
                        required: true,
                        minlength: 5,
                        maxlength: 100
                    },
                    UserName: {
                        required: true,
                        minlength: 5,
                        maxlength: 20
                    },
                    GrupoUsuario: {
                        required: {
                            depends: function () {
                                return false; //$("#GrupoUsuario option:selected").val() != "0";
                            }
                        }
                    },
                    Email: {
                        required: true,
                        email: true
                    },
                    EmailConfirm: {
                        required: true,
                        email: true,
                        equalTo: '#Email'
                    },
                    Password: {
                        required: true,
                        minlength: 6,
                        maxlength: 20
                    },
                    PasswordConfirm: {
                        required: true,
                        minlength: 6,
                        maxlength: 20,
                        equalTo: '#Password'
                    }
                },

                // Messages for form validation
                messages: {
                    Nome: {
                        required: 'Por gentileza, digite seu Nome',
                        minlength: 'Tamanho mínimo de 5 caracteres',
                        maxlength: 'Tamanho máximo de 100 caracteres'
                    },
                    UserName: {
                        requered: 'Por gentileza, digite um nome de usuário',
                        minlength: 'Tamanho mínimo de 5 caracteres',
                        maxlength: 'Tamanho máximo de 10 caracteres'
                    },
                    GrupoUsuario: {
                        requered: 'Por gentileza, selecione um grupo'
                    },
                    Email: {
                        required: 'Por gentileza, digite seu e-mail',
                        Email: 'Por gentileza, digite um e-mail válido'
                    },
                    EmailConfirm: {
                        required: 'Confirme seu e-mail',
                        Email: 'Por gentileza, digite um e-mail válido',
                        equalTo: 'E-mails digitados estão diferentes, favor repetir!'
                    },
                    Password: {
                        required: 'Por gentileza, digite sua senha',
                        minlength: 'Tamanho mínimo de 6 caracteres',
                        maxlength: 'Tamanho máximo de 20 caracteres'
                    },
                    PasswordConfirm: {
                        required: 'Confirme sua senha',
                        equalTo: 'Senha digitadas, não conferen, favor repetir!'
                    }
                },

                // Do not change code below
                errorPlacement: function (error, element) {
                    error.insertAfter(element.parent());
                }
            });
        });
    </script>
}